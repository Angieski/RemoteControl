#!/bin/bash

echo "üöÄ SCRIPT DE ATUALIZA√á√ÉO DO SERVIDOR AWS RELAY"
echo "=============================================="

# Configura√ß√µes
SERVER_IP="54.232.138.198"
SERVER_USER="ubuntu"
LOCAL_RELAY_PATH="./relay-server/server.js"
REMOTE_RELAY_PATH="/home/ubuntu/remote-control-relay/server.js"
SERVICE_NAME="remote-relay"

echo "üì° Servidor: $SERVER_IP"
echo "üë§ Usu√°rio: $SERVER_USER"
echo "üìÇ Arquivo local: $LOCAL_RELAY_PATH"
echo "üìÇ Arquivo remoto: $REMOTE_RELAY_PATH"
echo ""

# Verificar se o arquivo local existe
if [ ! -f "$LOCAL_RELAY_PATH" ]; then
    echo "‚ùå Erro: Arquivo $LOCAL_RELAY_PATH n√£o encontrado!"
    exit 1
fi

echo "‚úÖ Arquivo local encontrado"

# Fazer backup do servidor atual
echo ""
echo "1Ô∏è‚É£ FAZENDO BACKUP DO SERVIDOR ATUAL..."
ssh -o ConnectTimeout=10 $SERVER_USER@$SERVER_IP "
    echo 'üìÅ Criando backup...'
    cp $REMOTE_RELAY_PATH ${REMOTE_RELAY_PATH}.backup-$(date +%Y%m%d_%H%M%S)
    echo '‚úÖ Backup criado'
"

if [ $? -ne 0 ]; then
    echo "‚ùå Erro ao fazer backup do servidor"
    exit 1
fi

# Parar o servi√ßo
echo ""
echo "2Ô∏è‚É£ PARANDO SERVI√áO ATUAL..."
ssh $SERVER_USER@$SERVER_IP "
    echo 'üõë Parando servi√ßo $SERVICE_NAME...'
    sudo systemctl stop $SERVICE_NAME
    echo '‚úÖ Servi√ßo parado'
"

# Fazer upload do novo arquivo
echo ""
echo "3Ô∏è‚É£ FAZENDO UPLOAD DO NOVO C√ìDIGO..."
scp $LOCAL_RELAY_PATH $SERVER_USER@$SERVER_IP:$REMOTE_RELAY_PATH

if [ $? -ne 0 ]; then
    echo "‚ùå Erro no upload do arquivo"
    echo "üîÑ Restaurando backup..."
    ssh $SERVER_USER@$SERVER_IP "
        cp ${REMOTE_RELAY_PATH}.backup-* $REMOTE_RELAY_PATH
        sudo systemctl start $SERVICE_NAME
    "
    exit 1
fi

echo "‚úÖ Upload conclu√≠do"

# Reiniciar o servi√ßo
echo ""
echo "4Ô∏è‚É£ REINICIANDO SERVI√áO..."
ssh $SERVER_USER@$SERVER_IP "
    echo 'üöÄ Iniciando servi√ßo $SERVICE_NAME...'
    sudo systemctl start $SERVICE_NAME
    sleep 3
    echo 'üìä Status do servi√ßo:'
    sudo systemctl status $SERVICE_NAME --no-pager -l
"

# Verificar se o servi√ßo est√° funcionando
echo ""
echo "5Ô∏è‚É£ VERIFICANDO FUNCIONAMENTO..."
sleep 5

# Testar API de health
echo "üè• Testando health check..."
HEALTH_RESPONSE=$(curl -s http://$SERVER_IP:8080/health)

if [ $? -eq 0 ]; then
    echo "‚úÖ Health check: $HEALTH_RESPONSE"
else
    echo "‚ùå Health check falhou"
    exit 1
fi

# Testar WebSocket (precisaria de um cliente)
echo ""
echo "6Ô∏è‚É£ TESTANDO WEBSOCKET..."
echo "üìù Para testar o WebSocket completamente, execute:"
echo "   node test-websocket.js"
echo ""

echo "üéâ ATUALIZA√á√ÉO DO SERVIDOR CONCLU√çDA!"
echo "=================================="
echo "‚úÖ Backup criado"
echo "‚úÖ C√≥digo atualizado" 
echo "‚úÖ Servi√ßo reiniciado"
echo "‚úÖ Health check passou"
echo ""
echo "üîç Pr√≥ximos passos:"
echo "1. Teste a aplica√ß√£o cliente"
echo "2. Verifique conex√µes WebSocket"
echo "3. Valide o fluxo completo Host ‚Üî Viewer"